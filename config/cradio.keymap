// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2000  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 15    // 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            global-quick-tap;
        };

        hlt: hold_layer_tap {
            label = "hold_layer_tap";
            compatible = "zmk,behavior-hold-tap";
            bindings = <&lt>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            global-quick-tap;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W               &kp E           &kp R                    &kp T          &kp Y        &kp U         &kp I      &kp O                     &kp P
&lt 5 A           &kp S               &kp D           &kp F                    &kp G          &kp H        &kp J         &kp K      &kp L                     &lt 4 SEMICOLON
&ht LEFT_SHIFT Z  &ht LEFT_CONTROL X  &ht LEFT_ALT C  &kp V                    &kp B          &kp N        &kp M         &kp COMMA  &ht RIGHT_CONTROL PERIOD  &ht RIGHT_SHIFT SINGLE_QUOTE
                                                      &ht LEFT_COMMAND ESCAPE  &lt 1 SPACE    &lt 2 ENTER  &ht RALT DEL
            >;
        };

        left_layer {
            bindings = <
&kp TAB     &none             &none         &none   &none     &msc SCRL_UP    &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &trans
&kp ESCAPE  &none             &none         &none   &none     &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
&kp LSHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &none   &none     &none           &mkp MB5        &mkp MCLK       &mkp MB4         &trans
                                            &trans  &trans    &mkp LCLK       &mkp RCLK
            >;
        };

        right_layer {
            bindings = <
&kp N1          &kp N2     &kp N3        &kp N4    &kp N5      &kp N6        &kp AMPS   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp NON_US_BACKSLASH
&kp TILDE       &kp LCTRL  &kp LEFT_ALT  &kp LCMD  &kp CAPS    &kp ASTERISK  &kp MINUS  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SQT
&kp LEFT_SHIFT  &kp CARET  &none         &none     &none       &kp EQUAL     &kp UNDER  &kp COMMA             &kp PERIOD             &kp SLASH
                                         &trans    &trans      &trans        &trans
            >;
        };

        tri_layer {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0    &bt BT_SEL 2  &kp LANG1  &kp K_LOCK    &kp C_MUTE    &kp C_PREV
&kp F5  &kp F6   &kp F7   &kp F8   &bt BT_SEL 1    &bt BT_SEL 3  &kp LANG2  &kp C_BRI_UP  &kp C_VOL_UP  &kp C_PP
&kp F9  &kp F10  &kp F11  &kp F12  &bt BT_CLR      &out OUT_TOG  &kp LANG3  &kp C_BRI_DN  &kp C_VOL_DN  &kp C_NEXT
                          &trans   &trans          &trans        &trans
            >;
        };

        nav {
            bindings = <
&kp TAB     &trans     &trans  &trans  &trans    &kp DELETE     &kp LEFT_BRACKET  &kp UP_ARROW    &kp RIGHT_BRACKET  &bootloader
&kp ESCAPE  &trans     &trans  &trans  &trans    &kp BACKSPACE  &kp LEFT          &kp DOWN_ARROW  &kp RIGHT          &trans
&kp LSHIFT  &kp LCTRL  &trans  &trans  &trans    &trans         &trans            &trans          &trans             &trans
                               &trans  &trans    &trans         &trans
            >;
        };

        left_layer_2 {
            bindings = <
&bootloader  &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_UP      &kp MINUS  &kp N7        &kp N8  &kp N9  &trans
&trans       &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN    &kp PLUS   &kp N4        &kp N5  &kp N6  &kp ASTERISK
&kp LSHIFT   &mkp MB5        &mkp MCLK       &mkp MB4         &trans            &kp N0     &kp N1        &kp N2  &kp N3  &kp SLASH
                                             &mkp RCLK        &mkp LCLK         &trans     &ht LCMD DOT
            >;
        };
    };
};
